
// https://gist.github.com/olofk/e91fba2572396f55525f8814f05fb33d
module Transmitter<ClockFreq: uint, BaudRate: uint>(
    clk: clock,
    rst: bool,
    data_in: uint<8>,
    data_valid: bool,
) -> (
    tx: uint<1>,
    ready: bool,
) {
    const START_VALUE = ClockFreq / BaudRate
    const WIDTH = $clog2(START_VALUE)
    let counter = Reg<uint<WIDTH + 1>>(clk, rst)
    let data = Reg<uint<10>>(clk, rst)
    let ready_reg = Reg<bool>(clk, rst, q: ready)

    if counter.q[WIDTH] and data.q == 0 {
        ready_reg.d = true
    } else if data_valid and ready_reg.q {
        ready_reg.d = false
    }

    // if counter underflows
    if ready_reg.q or counter.q[WIDTH] {
        counter.d = START_VALUE
    } else {
        counter.d = counter.q - 1
    }

    if counter.q[WIDTH] {
        data.d = {1'b0, data.q[9:1]}
    } else if data_valid and ready_reg.q {
        data.d = {1'b1, data_in, 1'b0}
    }

    tx = data.q[0] or data.q == 0
}

module ShiftTransmitter<Bytes: uint, ClockFreq: uint, BaudRate: uint>(
    clk: clock, rst: bool, data: uint<8 * Bytes>, data_valid: bool,
) -> (
    is_done: bool, tx: uint<1>,
) {
    let bytes = Reg<uint<8 * Bytes>>(clk, rst)
    let i = Reg<uint<$clog2(Bytes + 1)>>(clk, rst)
    let init = Reg<bool>(clk, rst)
    let transmitter = UART::Transmitter<ClockFreq, BaudRate>(
        clk,
        rst,
        data_in: bytes.q[8 * Bytes - 1 -: 8],
        data_valid: not is_done and data_valid,
        tx,
    )

    is_done = data_valid and i.q == (Bytes + 1)

    if not is_done {
        if not init.q {
            bytes.d = data
            init.d = true
        } else if transmitter.ready {
            bytes.d = bytes.q shl 8
            i.d = i.q + 1
        }
    }
}
