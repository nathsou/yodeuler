
const Grid: uint<7>[20][20] = [
    [7'08, 7'02, 7'22, 7'97, 7'38, 7'15, 7'00, 7'40, 7'00, 7'75, 7'04, 7'05, 7'07, 7'78, 7'52, 7'12, 7'50, 7'77, 7'91, 7'08],
    [7'49, 7'49, 7'99, 7'40, 7'17, 7'81, 7'18, 7'57, 7'60, 7'87, 7'17, 7'40, 7'98, 7'43, 7'69, 7'48, 7'04, 7'56, 7'62, 7'00],
    [7'81, 7'49, 7'31, 7'73, 7'55, 7'79, 7'14, 7'29, 7'93, 7'71, 7'40, 7'67, 7'53, 7'88, 7'30, 7'03, 7'49, 7'13, 7'36, 7'65],
    [7'52, 7'70, 7'95, 7'23, 7'04, 7'60, 7'11, 7'42, 7'69, 7'24, 7'68, 7'56, 7'01, 7'32, 7'56, 7'71, 7'37, 7'02, 7'36, 7'91],
    [7'22, 7'31, 7'16, 7'71, 7'51, 7'67, 7'63, 7'89, 7'41, 7'92, 7'36, 7'54, 7'22, 7'40, 7'40, 7'28, 7'66, 7'33, 7'13, 7'80],
    [7'24, 7'47, 7'32, 7'60, 7'99, 7'03, 7'45, 7'02, 7'44, 7'75, 7'33, 7'53, 7'78, 7'36, 7'84, 7'20, 7'35, 7'17, 7'12, 7'50],
    [7'32, 7'98, 7'81, 7'28, 7'64, 7'23, 7'67, 7'10, 7'26, 7'38, 7'40, 7'67, 7'59, 7'54, 7'70, 7'66, 7'18, 7'38, 7'64, 7'70],
    [7'67, 7'26, 7'20, 7'68, 7'02, 7'62, 7'12, 7'20, 7'95, 7'63, 7'94, 7'39, 7'63, 7'08, 7'40, 7'91, 7'66, 7'49, 7'94, 7'21],
    [7'24, 7'55, 7'58, 7'05, 7'66, 7'73, 7'99, 7'26, 7'97, 7'17, 7'78, 7'78, 7'96, 7'83, 7'14, 7'88, 7'34, 7'89, 7'63, 7'72],
    [7'21, 7'36, 7'23, 7'09, 7'75, 7'00, 7'76, 7'44, 7'20, 7'45, 7'35, 7'14, 7'00, 7'61, 7'33, 7'97, 7'34, 7'31, 7'33, 7'95],
    [7'78, 7'17, 7'53, 7'28, 7'22, 7'75, 7'31, 7'67, 7'15, 7'94, 7'03, 7'80, 7'04, 7'62, 7'16, 7'14, 7'09, 7'53, 7'56, 7'92],
    [7'16, 7'39, 7'05, 7'42, 7'96, 7'35, 7'31, 7'47, 7'55, 7'58, 7'88, 7'24, 7'00, 7'17, 7'54, 7'24, 7'36, 7'29, 7'85, 7'57],
    [7'86, 7'56, 7'00, 7'48, 7'35, 7'71, 7'89, 7'07, 7'05, 7'44, 7'44, 7'37, 7'44, 7'60, 7'21, 7'58, 7'51, 7'54, 7'17, 7'58],
    [7'19, 7'80, 7'81, 7'68, 7'05, 7'94, 7'47, 7'69, 7'28, 7'73, 7'92, 7'13, 7'86, 7'52, 7'17, 7'77, 7'04, 7'89, 7'55, 7'40],
    [7'04, 7'52, 7'08, 7'83, 7'97, 7'35, 7'99, 7'16, 7'07, 7'97, 7'57, 7'32, 7'16, 7'26, 7'26, 7'79, 7'33, 7'27, 7'98, 7'66],
    [7'88, 7'36, 7'68, 7'87, 7'57, 7'62, 7'20, 7'72, 7'03, 7'46, 7'33, 7'67, 7'46, 7'55, 7'12, 7'32, 7'63, 7'93, 7'53, 7'69],
    [7'04, 7'42, 7'16, 7'73, 7'38, 7'25, 7'39, 7'11, 7'24, 7'94, 7'72, 7'18, 7'08, 7'46, 7'29, 7'32, 7'40, 7'62, 7'76, 7'36],
    [7'20, 7'69, 7'36, 7'41, 7'72, 7'30, 7'23, 7'88, 7'34, 7'62, 7'99, 7'69, 7'82, 7'67, 7'59, 7'85, 7'74, 7'04, 7'36, 7'16],
    [7'20, 7'73, 7'35, 7'29, 7'78, 7'31, 7'90, 7'01, 7'74, 7'31, 7'49, 7'71, 7'48, 7'86, 7'81, 7'16, 7'23, 7'57, 7'05, 7'54],
    [7'01, 7'70, 7'54, 7'71, 7'83, 7'51, 7'54, 7'69, 7'16, 7'92, 7'33, 7'48, 7'61, 7'43, 7'52, 7'01, 7'89, 7'19, 7'67, 7'48],
]

const W = $clog2(20)

module CellAt(x: uint<W>, y: uint<W>) -> (q: uint<7>) {
    q = x >= 20 or y >= 20 ? 0 : Grid[y][x]
}

module Solution(clk: clock, rst: bool) -> (is_ready: bool, q: uint<28>) {
    let max = Reg<uint<28>>(clk, rst, q)
    let x = Reg<uint<W>>(clk, rst)
    let y = Reg<uint<W>>(clk, rst)
    is_ready = x.q == 19 and y.q == 19
    let current = CellAt(x: x.q, y: y.q).q

    let x1: uint<W> = x.q + 1
    let x2: uint<W> = x.q + 2
    let x3: uint<W> = x.q + 3
    let y1: uint<W> = y.q + 1
    let y2: uint<W> = y.q + 2
    let y3: uint<W> = y.q + 3
    let x1n: uint<W> = x.q - 1
    let x2n: uint<W> = x.q - 2
    let x3n: uint<W> = x.q - 3

    let right =
        current *
        CellAt(x: x1, y: y.q).q *
        CellAt(x: x2, y: y.q).q *
        CellAt(x: x3, y: y.q).q

    let down =
        current *
        CellAt(x: x.q, y: y1).q *
        CellAt(x: x.q, y: y2).q *
        CellAt(x: x.q, y: y3).q
    
    let diag1 =
        current *
        CellAt(x: x1, y: y1).q *
        CellAt(x: x2, y: y2).q *
        CellAt(x: x3, y: y3).q

    let diag2 =
        current *
        CellAt(x: x1n, y: y1).q *
        CellAt(x: x2n, y: y2).q *
        CellAt(x: x3n, y: y3).q

    let max1 = right >: down ? right : down
    let max2 = diag1 >: max1 ? diag1 : max1
    let max3 = diag2 >: max2 ? diag2 : max2
    max.d = max3 >: max.q ? max3 : max.q

    if not is_ready {
        if x.q == 19 {
            x.d = 0
            y.d = y.q + 1
        } else {
            x.d = x.q + 1
        }
    }
}
